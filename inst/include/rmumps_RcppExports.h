// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rmumps_RCPPEXPORTS_H_GEN_
#define RCPP_rmumps_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace rmumps {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rmumps", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rmumps", "_rmumps_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rmumps");
            }
        }
    }

    inline void Rmumps__solveptr(XPtr<Rmumps> pobj, XPtr<double> pb, int lrhs, int nrhs) {
        typedef SEXP(*Ptr_Rmumps__solveptr)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_Rmumps__solveptr p_Rmumps__solveptr = NULL;
        if (p_Rmumps__solveptr == NULL) {
            validateSignature("void(*Rmumps__solveptr)(XPtr<Rmumps>,XPtr<double>,int,int)");
            p_Rmumps__solveptr = (Ptr_Rmumps__solveptr)R_GetCCallable("rmumps", "_rmumps_Rmumps__solveptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__solveptr(Shield<SEXP>(Rcpp::wrap(pobj)), Shield<SEXP>(Rcpp::wrap(pb)), Shield<SEXP>(Rcpp::wrap(lrhs)), Shield<SEXP>(Rcpp::wrap(nrhs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline XPtr<Rmumps> Rmumps__ptr_ijv(XPtr<int> pi, XPtr<int> pj, XPtr<double> pa, int n, int nz, int sym) {
        typedef SEXP(*Ptr_Rmumps__ptr_ijv)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Rmumps__ptr_ijv p_Rmumps__ptr_ijv = NULL;
        if (p_Rmumps__ptr_ijv == NULL) {
            validateSignature("XPtr<Rmumps>(*Rmumps__ptr_ijv)(XPtr<int>,XPtr<int>,XPtr<double>,int,int,int)");
            p_Rmumps__ptr_ijv = (Ptr_Rmumps__ptr_ijv)R_GetCCallable("rmumps", "_rmumps_Rmumps__ptr_ijv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__ptr_ijv(Shield<SEXP>(Rcpp::wrap(pi)), Shield<SEXP>(Rcpp::wrap(pj)), Shield<SEXP>(Rcpp::wrap(pa)), Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(nz)), Shield<SEXP>(Rcpp::wrap(sym)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<XPtr<Rmumps> >(rcpp_result_gen);
    }

    inline void Rmumps__del_ptr(XPtr<Rmumps> pm) {
        typedef SEXP(*Ptr_Rmumps__del_ptr)(SEXP);
        static Ptr_Rmumps__del_ptr p_Rmumps__del_ptr = NULL;
        if (p_Rmumps__del_ptr == NULL) {
            validateSignature("void(*Rmumps__del_ptr)(XPtr<Rmumps>)");
            p_Rmumps__del_ptr = (Ptr_Rmumps__del_ptr)R_GetCCallable("rmumps", "_rmumps_Rmumps__del_ptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__del_ptr(Shield<SEXP>(Rcpp::wrap(pm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline List Rmumps__triplet(XPtr<Rmumps> pm) {
        typedef SEXP(*Ptr_Rmumps__triplet)(SEXP);
        static Ptr_Rmumps__triplet p_Rmumps__triplet = NULL;
        if (p_Rmumps__triplet == NULL) {
            validateSignature("List(*Rmumps__triplet)(XPtr<Rmumps>)");
            p_Rmumps__triplet = (Ptr_Rmumps__triplet)R_GetCCallable("rmumps", "_rmumps_Rmumps__triplet");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__triplet(Shield<SEXP>(Rcpp::wrap(pm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline void Rmumps__set_mat_ptr(XPtr<Rmumps> pm, XPtr<double> pa) {
        typedef SEXP(*Ptr_Rmumps__set_mat_ptr)(SEXP,SEXP);
        static Ptr_Rmumps__set_mat_ptr p_Rmumps__set_mat_ptr = NULL;
        if (p_Rmumps__set_mat_ptr == NULL) {
            validateSignature("void(*Rmumps__set_mat_ptr)(XPtr<Rmumps>,XPtr<double>)");
            p_Rmumps__set_mat_ptr = (Ptr_Rmumps__set_mat_ptr)R_GetCCallable("rmumps", "_rmumps_Rmumps__set_mat_ptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__set_mat_ptr(Shield<SEXP>(Rcpp::wrap(pm)), Shield<SEXP>(Rcpp::wrap(pa)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Rmumps__set_permutation(XPtr<Rmumps> pm, int permutation) {
        typedef SEXP(*Ptr_Rmumps__set_permutation)(SEXP,SEXP);
        static Ptr_Rmumps__set_permutation p_Rmumps__set_permutation = NULL;
        if (p_Rmumps__set_permutation == NULL) {
            validateSignature("void(*Rmumps__set_permutation)(XPtr<Rmumps>,int)");
            p_Rmumps__set_permutation = (Ptr_Rmumps__set_permutation)R_GetCCallable("rmumps", "_rmumps_Rmumps__set_permutation");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__set_permutation(Shield<SEXP>(Rcpp::wrap(pm)), Shield<SEXP>(Rcpp::wrap(permutation)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline int Rmumps__get_permutation(XPtr<Rmumps> pm) {
        typedef SEXP(*Ptr_Rmumps__get_permutation)(SEXP);
        static Ptr_Rmumps__get_permutation p_Rmumps__get_permutation = NULL;
        if (p_Rmumps__get_permutation == NULL) {
            validateSignature("int(*Rmumps__get_permutation)(XPtr<Rmumps>)");
            p_Rmumps__get_permutation = (Ptr_Rmumps__get_permutation)R_GetCCallable("rmumps", "_rmumps_Rmumps__get_permutation");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rmumps__get_permutation(Shield<SEXP>(Rcpp::wrap(pm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

}

#endif // RCPP_rmumps_RCPPEXPORTS_H_GEN_
