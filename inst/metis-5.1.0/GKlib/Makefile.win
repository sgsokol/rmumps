# 'make'	compile .c files to .o files
# 'make clean'  removes all .o
#
include ../../MUMPS_5.0.1/Makefile.inc.win
# define the C compiler to use
#CC = gcc

# define any compile-time flags
#CFLAGS = -Wall -g
CFLAGS = $(OPTC) -DMINGW -DUSE_GKREGEX

# define any directories containing header files other than /usr/include
#
INCLUDES = -I.

# define library paths in addition to /usr/lib
#   if I wanted to include libraries not in /usr/lib I'd specify
#   their path using -Lpath, something like:
#LFLAGS = -L/home/newhall/lib  -L../lib

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname 
#   option, something like (this will link in libmylib.so and libm.so:
#LIBS = -lmylib -lm

# define the C source files
SRCS = b64.c evaluate.c gkregex.c itemsets.c pdb.c seq.c tokenizer.c blas.c fkvkselect.c graph.c mcore.c pqueue.c sort.c util.c csr.c fs.c htable.c memory.c random.c string.c error.c getopt.c io.c omp.c rw.c timers.c 

# define the C object files 
#
# This uses Suffix Replacement within a macro:
#   $(name:string1=string2)
#	 For each word in 'name' replace 'string1' with 'string2'
# Below we are replacing the suffix .c of all words in the macro SRCS
# with the .o suffix
#
OBJS = $(SRCS:.c=.o)

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

.PHONY: clean
all:    $(OBJS)
#	@echo  Simple compiler named mycc has been compiled

#$(MAIN): $(OBJS) 
#	$(CC) $(CFLAGS) $(INCLUDES) -o $(MAIN) $(OBJS) $(LFLAGS) $(LIBS)

# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .o file) 
# (see the gnu make manual section about automatic variables)
.c.o:
	$(CC) $(CFLAGS) $(INCLUDES) -w -c $<  -o $@

clean:
	$(RM) *.o *~ *.bck

#depend: $(SRCS)
#	makedepend $(INCLUDES) $^
